import { IBot, IGroupData, IMessage } from "@kamuridesu/whatframework/@types/types.js";
import { createSticker } from "@kamuridesu/whatframework/libs/sticker.js";

import { GPT } from "../utils/gpt.js";

const gptInstance = new GPT();

export async function makeSticker(bot: IBot, message: IMessage, args: string[]) {
    let packname = "Riko's stickers collection";
    let author = "Riko Bot";

    if (args.length >= 1) {
        if (["help", "ajuda"].includes(args[0])) {
            return message.replyText(`Use ${bot.prefix}sticker para criar um sticker, ou !sticker pacote autor para mudar o pacote e o autor!`);
        }
        if (args.length == 2) {
            packname = args[0];
            author = args[1];
        }
    }

    return createSticker(message, bot, author, packname)
}

export async function nivelGado(message: IMessage) {
    let messages = [
        "ultra extreme gado",
        "Gado-Master",
        "Gado-Rei",
        "Gado",
        "Escravo-ceta",
        "Escravo-ceta Maximo",
        "Gacorno?",
        "Jogador De Forno Livre<3",
        "Mestre Do Frifai<3<3",
        "Gado-Manso",
        "Gado-Conformado",
        "Gado-Incubado",
        "Gado Deus",
        "Mestre dos Gados",
        "Topa tudo por buceta",
        "Gado Comum",
        "Mini Gadinho",
        "Gado Iniciante",
        "Gado Basico",
        "Gado Intermediario",
        "Gado Avan√ßado",
        "Gado Profisional",
        "Gado Mestre",
        "Gado Chifrudo",
        "Corno Conformado",
        "Corno HiperChifrudo",
        "Chifrudo Deus",
        "Mestre dos Chifrudos"
    ];
    let choice = `Voc√™ √©:\n\n${messages[Math.floor(Math.random() * messages.length)]}`;
    return await message.replyText(choice);
}

export async function slot(message: IMessage) {
    // data.sender_data.slot_chances = data.sender_data.slot_chances - 1;
    const fruits_array = ['ü•ë', 'üçâ', 'üçì', 'üçé', 'üçç', 'ü•ù', 'üçë', 'ü••', 'üçã', 'üçê', 'üçå', 'üçí', 'üîî', 'üçä', 'üçá']
    // const fruits_array = ['ü•ë', 'üçâ']
    let winner = []
    for (let i = 0; i < 3; i++) {
        winner.push(fruits_array[Math.floor(Math.random() * fruits_array.length)]);
    }
    let _message = "Voc√™ perdeu!"
    if ((winner[0] === winner[1]) && (winner[1] === winner[2]) && (winner[2] == winner[0])) {
        _message = "Voc√™ ganhou!";
    }
    const slot_message =
        `Consiga 3 iguais para ganhar
‚ïî‚ïê‚ïê‚ïê ‚â™ ‚Ä¢‚ùà‚Ä¢ ‚â´ ‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         [üí∞SLOTüí∞ | 777 ]        
‚ïë                                             
‚ïë                                             
‚ïë           ${winner.join(" : ")}  ‚óÑ‚îÅ‚îÅ‚îõ
‚ïë            
‚ïë                                           
‚ïë         [üí∞SLOTüí∞ | 777 ]        
‚ïö‚ïê‚ïê‚ïê‚ïê ‚â™ ‚Ä¢‚ùà‚Ä¢ ‚â´ ‚ïê‚ïê‚ïê‚ïù

${_message}`
    return message.replyText(slot_message);
}

export async function nivelGay(message: IMessage) {
    const responses = [
        'hmm... √© heteroüòî',
        '+/- boiola',
        'tenho minha desconfian√ßa...üòë',
        '√© n√©?üòè',
        '√© ou n√£o?üßê',
        '√© gayüôà'
    ]
    const percentage = Math.round(Math.random() * 100);
    const index = percentage <= 10 ? 0 : (percentage > 10 && percentage <= 20 ? 1 : (percentage > 20 && percentage <= 30 ? 2 : (percentage > 30 && percentage <= 40 ? 3 : (percentage > 40 && percentage <= 50 ? 4 : 5))));
    const response = `Voc√™ √© ${percentage}% gay\n\n${responses[index]}`
    return message.replyText(response);
}

export async function chanceDe(message: IMessage, args: string[]) {
    let error = "Erro desconhecido!";
    if (args.length == 0) {
        error = "Voc√™ precisa especificar qual a chance, ex: !chance de eu ficar off";
    } else {
        const text = args.join(" ");
        if (text.includes("virgindade") || text.includes("virgindade") || text.includes("virgem")) {
            return await message.replyText("Nenhuma");
        }
        return await message.replyText("A chance " + text + " √© de " + Math.round(Math.random() * 100) + "%");
    }
    return await message.replyText(error);
}

export async function perc(message: IMessage, args: string[]) {
    let error = "Erro desconhecido!";
    if (args.length == 0) {
        error = "Voc√™ dizer o nome da porcentagem!";
    } else {
        const text = args.join(" ");
        return await message.replyText("Voc√™ √© " + Math.round(Math.random() * 100) + "% " + text);
    }
    return await message.replyText(error);
}

export async function casal(message: IMessage, bot: IBot, group: IGroupData) {
    if (!group) {
        return message.replyText("Erro! Comando pode ser usado apenas em um grupo!");
    }
    const membersExceptBot = group.members.filter((value) => value.id.split("@")[0] != bot.botNumber);
    console.log(membersExceptBot);
    console.log(bot.botNumber);
    let randomMember_1 = Math.round(Math.random() * membersExceptBot.length);
    let randomMember_2 = Math.round(Math.random() * membersExceptBot.length);
    while (randomMember_2 == randomMember_1 || membersExceptBot[randomMember_1] == undefined || membersExceptBot[randomMember_2] == undefined) {
        randomMember_2 = Math.round(Math.random() * membersExceptBot.length);
        randomMember_1 = Math.round(Math.random() * membersExceptBot.length);
    }
    let _message = "‚ù§Ô∏è‚ù§Ô∏è Meu casal ‚ù§Ô∏è‚ù§Ô∏è\n\n" + `${membersExceptBot[randomMember_1].id} + ${membersExceptBot[randomMember_2].id}`
    message.replyText(_message);
}

export async function gpt(message: IMessage, args: string[]) {
    if (args == undefined) return message.replyText("A mensagem n√£o pode ser vazia!");
    console.log(message.body)
    await message.replyText("Gerando resposta...");
    return gptInstance.generate(message);
}